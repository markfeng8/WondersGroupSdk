apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.wondersgroup.android.healthcity_sdk"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 92
        versionName "2.8.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a'
            //, 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    signingConfigs {
        debug {
            storeFile file("wondersgroup_sdk.jks")
            storePassword 'wondersgroup_android'
            keyAlias 'wondersgroup_android'
            keyPassword 'wondersgroup_android'
        }
        release {
            storeFile file("wondersgroup_sdk.jks")
            storePassword 'wondersgroup_android'
            keyAlias 'wondersgroup_android'
            keyPassword 'wondersgroup_android'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = getApkName()
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation('com.jakewharton:butterknife:8.8.1', {
        exclude group: "com.android.support"
    })
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.tencent.bugly:crashreport:2.8.6.0'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.44'
    implementation 'com.xsir:PgyerAndroidAppUpdate:0.9'
    implementation project(':SDK_Library')

//    implementation 'com.lzy.net:okgo:3.0.4'
//    implementation 'com.orhanobut:logger:2.1.1'
//    implementation 'com.google.zxing:core:3.3.0'
//    implementation 'com.mylhyl:zxingscanner:1.5.0'
//    implementation 'com.google.code.gson:gson:2.8.5'
//    implementation 'pub.devrel:easypermissions:1.1.1'
//    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
//    implementation 'com.github.iwgang:countdownview:2.1.3'
    implementation 'com.android.support:appcompat-v7:27.1.0'
//    implementation 'com.android.support:gridlayout-v7:27.1.0'
//    implementation 'com.android.support:recyclerview-v7:27.1.0'
//    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
//    implementation(name: 'hzauthsdk-release', ext: 'aar')
//    implementation(name: 'hzsdk-20181116-release', ext: 'aar')
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.44'
}

def getApkFullPath() {
    return rootDir.getAbsolutePath() + "/app/build/outputs/apk/release/" + getApkName()
}

def getApkName() {
    return "HZ-SDK-example-V${android.defaultConfig.versionName}-${releaseTime()}.apk"
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def readProperties(key) {
    File file = rootProject.file('local.properties')
    if (file.exists()) {
        InputStream inputStream = rootProject.file('local.properties').newDataInputStream()
        Properties properties = new Properties()
        properties.load(inputStream)

        if (properties.containsKey(key)) {
            return properties.getProperty(key)
        }
    }
}

static def getUpdateDescription() {
    return '1.代码优化;\n2.为了更好的用户体验赶快更新吧;'
}

task("uploadApk") {
    doLast {
        def command = "curl -F \"file=@${getApkFullPath()}\" -F \"uKey=${readProperties('pgyer.userKey')}\" -F \"_api_key=${readProperties('pgyer.apiKey')}\" -F \"buildUpdateDescription=${getUpdateDescription()}\" https://www.pgyer.com/apiv2/app/upload"
        println "command:" + command

        try {
            exec {
                ExecSpec execSpec ->
                    executable 'bash'
                    args '-c', command
            }
            println "uploadApk success~"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

uploadApk.dependsOn("assembleRelease")

task("installApk") {
    doLast {
        def command = "adb install -r ${getApkFullPath()}"
        println "command:" + command

        try {
            exec {
                ExecSpec execSpec ->
                    executable 'bash'
                    args '-c', command
            }
            println "installApk success"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

task("launchApp") {
    doLast {
        def command = "adb shell am start ${android.defaultConfig.applicationId}/.MainActivity"
        println "command:" + command

        try {
            exec {
                ExecSpec execSpec ->
                    executable 'bash'
                    args '-c', command
            }
            println "installApk success"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

/*
 * 打包命令：
 * ./gradlew assembleRelease
 * 打包上传 APK:
 * ./gradlew :app:uploadApk
 * 安装 APK:
 * ./gradlew :app:installApk
 * 启动 APK:
 * ./gradlew :app:launchApp
 */
